{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CardComponent","_ref","tt","react_default","a","createElement","Button","variant","color","CardList","tongueTwisters","map","card_component","key","id","App","_useState","useState","_useState2","Object","slicedToArray","selectedTwister","setSelectedTwister","className","Typography","component","onClick","randomIndex","Math","floor","random","length","content","card_list_component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"03+DAceA,EARwB,SAAAC,GAA0BA,EAAvBC,GACtC,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,WAAlC,wBCMOC,EAVY,WACvB,OACIN,EAAAC,EAAAC,cAAA,WAEIK,EAAeC,IAAI,SAAAT,GAAE,OAAIC,EAAAC,EAAAC,cAACO,EAAD,CAAMC,IAAKX,EAAGY,GAAIZ,GAAIA,wBCwB5Ca,EA1BO,WAAoB,IAAAC,EACMC,mBAAS,IADfC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjCK,EADiCH,EAAA,GAChBI,EADgBJ,EAAA,GAQxC,OACEf,EAAAC,EAAAC,cAAA,OAAKkB,UAAU,iBACbpB,EAAAC,EAAAC,cAAA,UAAQkB,UAAU,cAElBpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAYjB,QAAQ,KAAKkB,UAAU,MAAnC,eAGEtB,EAAAC,EAAAC,cAAA,SACIgB,GAEJlB,EAAAC,EAAAC,cAAA,UAAQqB,QAfM,WAClB,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWpB,EAAeqB,OAAS,GACrET,EAAmBZ,EAAeiB,GAAaK,WAa3C,yBACA7B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4B,EAAD,SCdYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f7f428af.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport Button from '@material-ui/core/Button';\n\ninterface Props {\n    tt?: any\n}\nconst CardComponent: React.FC<Props> = ({ tt }): ReactElement => {\n    return (\n        <Button variant=\"contained\" color=\"primary\">\n            Hello World\n        </Button>\n    )\n}\n\nexport default CardComponent;","import React, { ReactElement } from 'react';\nimport Card from '../card/card.component';\nimport tongueTwisters from '../../tongue-source.json';\n\nconst CardList: React.FC = (): ReactElement => {\n    return (\n        <div>\n        {\n            tongueTwisters.map(tt => <Card key={tt.id} tt={tt} />)\n        }\n        </div>\n    );\n}\n\nexport default CardList;","import React, { ReactElement, useState } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport 'typeface-roboto';\nimport tongueTwisters from './tongue-source.json';\nimport { Typography } from '@material-ui/core';\n\nconst App: React.FC = (): ReactElement => {\n  const [selectedTwister, setSelectedTwister] = useState('');\n  \n  const handleClick = () => {\n    let randomIndex = Math.floor(Math.random() * tongueTwisters.length + 1);\n    setSelectedTwister(tongueTwisters[randomIndex].content);\n  }\n\n  return (\n    <div className=\"TongueTyphoon\">\n      <header className=\"App-header\">\n        {/* We already have an h1 in the page, let's not duplicate it. */}\n      <Typography variant=\"h1\" component=\"h2\">\n        h1. Heading\n      </Typography>\n        <p>\n          { selectedTwister }\n        </p>\n        <button onClick={ handleClick }>Show a tongue twister</button>\n        <hr />\n        <CardList />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}